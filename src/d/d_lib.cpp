//
// Generated by dtk
// Translation Unit: d_lib.cpp
//

#include "d/d_lib.h"
#include "d/d_com_inf_game.h"
#include "m_Do/m_Do_mtx.h"
#include "SSystem/SComponent/c_math.h"

/* 80057000-800570CC       .text dLib_setCirclePath__FP18dLib_circle_path_c */
void dLib_setCirclePath(dLib_circle_path_c* path) {
    /* Nonmatching */
    path->mAngle += path->mAngleSpeed;
    f32 rad = path->mRadius + path->mWobbleAmplitude * cM_ssin(path->mAngle);
    mDoMtx_stack_c::transS(path->mTranslation);
    mDoMtx_stack_c::YrotM(path->mAngle);
    mDoMtx_stack_c::transM(rad, 0.0f, 0.0f);
    path->mPos.x = mDoMtx_stack_c::get()[0][3];
    path->mPos.y = mDoMtx_stack_c::get()[1][3];
    path->mPos.z = mDoMtx_stack_c::get()[2][3];
}

/* 800570CC-8005716C       .text dLib_getWaterY__FR4cXyzR12dBgS_ObjAcch */
void dLib_getWaterY(cXyz&, dBgS_ObjAcch&) {
    /* Nonmatching */
}

/* 8005716C-80057368       .text dLib_waveRot__FP3VecfP11dLib_wave_c */
void dLib_waveRot(Vec*, f32, dLib_wave_c*) {
    /* Nonmatching */
}

/* 80057368-8005746C       .text dLib_debugDrawAxis__FRA3_A4_ff */
void dLib_debugDrawAxis(Mtx&, f32) {
    /* Nonmatching */
}

/* 8005746C-80057510       .text dLib_debugDrawFan__FR4cXyzssfRC8_GXColor */
void dLib_debugDrawFan(cXyz&, s16, s16, f32, const GXColor&) {
    /* Nonmatching */
}

/* 80057510-800575E0       .text dLib_brkInit__FP12J3DModelDataP13mDoExt_brkAnmPCci */
bool dLib_brkInit(J3DModelData* modelData, mDoExt_brkAnm* anm, const char* arcName, int fileno) {
    J3DAnmTevRegKey* brk = (J3DAnmTevRegKey*)dComIfG_getObjectRes(arcName, fileno);
    JUT_ASSERT(0xae, brk != NULL);
    if (anm->init(modelData, brk, 1, J3DFrameCtrl::LOOP_ONCE_e, 1.0f, 0, -1, false, 0) == 0)
        return false;
    return true;
}

/* 800575E0-800576B0       .text dLib_btkInit__FP12J3DModelDataP13mDoExt_btkAnmPCci */
bool dLib_btkInit(J3DModelData* modelData, mDoExt_btkAnm* anm, const char* arcName, int fileno) {
    J3DAnmTextureSRTKey* btk = (J3DAnmTextureSRTKey*)dComIfG_getObjectRes(arcName, fileno);
    JUT_ASSERT(0xbb, btk != NULL);
    if (anm->init(modelData, btk, 1, J3DFrameCtrl::LOOP_ONCE_e, 1.0f, 0, -1, false, 0) == 0)
        return false;
    return true;
}

/* 800576B0-80057844       .text dLib_setAnm__FPCcP14mDoExt_McaMorfPScPScPScPC14dLib_anm_idx_cPC14dLib_anm_prm_cb */
void dLib_setAnm(const char*, mDoExt_McaMorf*, s8*, s8*, s8*, const dLib_anm_idx_c*, const dLib_anm_prm_c*, bool) {
    /* Nonmatching */
}

/* 80057844-80057988       .text dLib_bcks_setAnm__FPCcP14mDoExt_McaMorfPScPScPScPCiPC14dLib_anm_prm_cb */
void dLib_bcks_setAnm(const char*, mDoExt_McaMorf*, s8*, s8*, s8*, const int*, const dLib_anm_prm_c*, bool) {
    /* Nonmatching */
}

/* 80057988-80057A14       .text dLib_scaleAnime__FPfPfiPifff */
void dLib_scaleAnime(f32*, f32*, int, int*, f32, f32, f32) {
    /* Nonmatching */
}

/* 80057A14-80057A30       .text dLib_getPosFromMtx__FPA4_fP4cXyz */
void dLib_getPosFromMtx(MtxP mtx, cXyz* pos) {
    pos->set(mtx[0][3], mtx[1][3], mtx[2][3]);
}

/* 80057A30-80057AA4       .text dLib_pathInfo__FPP5dPathUc */
bool dLib_pathInfo(dPath** dst, u8 no) {
    dStage_dPath_c * path = dComIfGp_getStage().getPathInf();
    if (path != NULL) {
        *dst = path->m_path + no;
        return true;
    } else {
        return false;
    }
}

/* 80057AA4-80057D1C       .text dLib_pathMove__FP4cXyzPScP5dPathfPFP4cXyzP4cXyzP4cXyzPv_iPv */
void dLib_pathMove(cXyz* pos, s8* pPntNo, dPath* pPath, f32 speed, int (*pCallBack)(cXyz*, cXyz*, cXyz*, void*), void* pCallBackData) {
    /* Nonmatching */
    s8 pnt_no = *pPntNo;
    s8 pnt_next_no = pnt_no > (pPath->m_num - 1) ? 0 : pnt_no + 1;
    cXyz pnt_pos = pPath->mpPnt[pnt_no].mPos;
    cXyz pnt_next_pos = pPath->mpPnt[pnt_next_no].mPos;

    cXyz move = (pnt_next_pos - pnt_pos).normZP();
    if (pCallBack == NULL) {
        *pos = *pos + move * speed;
        f32 dist = pnt_pos.abs(*pos);
        f32 pnt_dist = pnt_pos.abs(pnt_next_pos);
        if (dist > pnt_dist) {
            *pPntNo = pnt_next_no;
            *pos = pnt_next_pos;
        }
    } else {
        if (pCallBack(pos, &pnt_pos, &pnt_next_pos, pCallBackData))
            *pPntNo = pnt_next_no;
    }
}

/* 80057D1C-80057EC0       .text dLib_setNextStageBySclsNum__FUcSc */
void dLib_setNextStageBySclsNum(u8, s8) {
    /* Nonmatching */
}

/* 80057EC0-80057F30       .text dLib_setFirstMsg__FUsUlUl */
void dLib_setFirstMsg(u16, u32, u32) {
    /* Nonmatching */
}

/* 80057F30-80057F78       .text dLib_checkPlayerInCircle__F4cXyzff */
bool dLib_checkPlayerInCircle(cXyz, f32, f32) {
    /* Nonmatching */
}

/* 80057F78-80058098       .text dLib_checkActorInCircle__F4cXyzP10fopAc_ac_cff */
bool dLib_checkActorInCircle(cXyz, fopAc_ac_c*, f32, f32) {
    /* Nonmatching */
}

/* 80058098-8005820C       .text dLib_checkActorInFan__F4cXyzP10fopAc_ac_cssff */
bool dLib_checkActorInFan(cXyz, fopAc_ac_c*, s16, s16, f32, f32) {
    /* Nonmatching */
}

/* 8005820C-80058250       .text __ct__9STControlFssssffss */
STControl::STControl(s16, s16, s16, s16, f32, f32, s16, s16) {
    /* Nonmatching */
}

/* 80058250-80058274       .text setWaitParm__9STControlFssssffss */
void STControl::setWaitParm(s16, s16, s16, s16, f32, f32, s16, s16) {
    /* Nonmatching */
}

/* 80058274-800582B0       .text init__9STControlFv */
void STControl::init() {
    /* Nonmatching */
}

/* 800582B0-800582D8       .text Xinit__9STControlFv */
void STControl::Xinit() {
    /* Nonmatching */
}

/* 800582D8-80058300       .text Yinit__9STControlFv */
void STControl::Yinit() {
    /* Nonmatching */
}

/* 80058300-80058310       .text getValueStick__9STControlFv */
void STControl::getValueStick() {
    /* Nonmatching */
}

/* 80058310-80058320       .text getAngleStick__9STControlFv */
void STControl::getAngleStick() {
    /* Nonmatching */
}

/* 80058320-80058330       .text getValueStick__10CSTControlFv */
void CSTControl::getValueStick() {
    /* Nonmatching */
}

/* 80058330-80058340       .text getAngleStick__10CSTControlFv */
void CSTControl::getAngleStick() {
    /* Nonmatching */
}

/* 80058340-800585D0       .text checkTrigger__9STControlFv */
bool STControl::checkTrigger() {
    /* Nonmatching */
}

/* 800585D0-8005863C       .text checkLeftTrigger__9STControlFv */
bool STControl::checkLeftTrigger() {
    /* Nonmatching */
}

/* 8005863C-800586A8       .text checkRightTrigger__9STControlFv */
bool STControl::checkRightTrigger() {
    /* Nonmatching */
}

/* 800586A8-80058714       .text checkUpTrigger__9STControlFv */
bool STControl::checkUpTrigger() {
    /* Nonmatching */
}

/* 80058714-80058780       .text checkDownTrigger__9STControlFv */
bool STControl::checkDownTrigger() {
    /* Nonmatching */
}

/* 80058780-80058834       .text dLib_getIplDaysFromSaveTime__Fv */
u32 dLib_getIplDaysFromSaveTime() {
    /* Nonmatching */
    OSTime dateIpl = dComIfGs_getDateIpl();
    if (dateIpl == 0)
        return 0;

    OSTime curTime = OSGetTime();
    return (curTime - dateIpl);
}

/* 80058834-80058910       .text dLib_get_QuatFromTriangle__FP4cXyzP4cXyzP4cXyz */
void dLib_get_QuatFromTriangle(cXyz*, cXyz*, cXyz*) {
    /* Nonmatching */
}

/* 80058910-800589A8       .text dLib_calc_QuatFromTriangle__FP10QuaternionfP4cXyzP4cXyzP4cXyz */
void dLib_calc_QuatFromTriangle(Quaternion*, f32, cXyz*, cXyz*, cXyz*) {
    /* Nonmatching */
}

