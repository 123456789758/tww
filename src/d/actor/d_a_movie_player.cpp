//
// Generated by dtk
// Translation Unit: d_a_movie_player.cpp
//

// This TU seems to disable inlining entirely, as there are several weak functions that get inlined
// in other TUs, but not here.
#pragma dont_inline on

#include "d/actor/d_a_movie_player.h"
#include "f_op/f_op_actor_mng.h"
#include "d/d_procname.h"
#include "d/d_com_inf_game.h"
#include "m_Do/m_Do_graphic.h"
#include "dolphin/os/OSMessage.h"

static Vec bss_3569;
// Not sure what these are, but they have size 1, and alignment 1 in the debug maps, but alignment 4 in the non-debug maps.
static u8 bss_1036 ALIGN_DECL(4);
static u8 bss_1034 ALIGN_DECL(4);
static u8 bss_1032 ALIGN_DECL(4);
static u8 bss_1031 ALIGN_DECL(4);
static u8 bss_1026 ALIGN_DECL(4);
static u8 bss_1024 ALIGN_DECL(4);
static u8 bss_1022 ALIGN_DECL(4);
static u8 bss_1021 ALIGN_DECL(4);
static u8 bss_984 ALIGN_DECL(4);
static u8 bss_982 ALIGN_DECL(4);
static u8 bss_980 ALIGN_DECL(4);
static u8 bss_979 ALIGN_DECL(4);
static u8 bss_941 ALIGN_DECL(4);
static u8 bss_939 ALIGN_DECL(4);
static u8 bss_937 ALIGN_DECL(4);
static u8 bss_936 ALIGN_DECL(4);

u8 THPStatistics[0x460];

daMP_Player_c daMP_ActivePlayer;

BOOL daMP_ReadThreadCreated;
OSMessageQueue daMP_FreeReadBufferQueue;
OSMessageQueue daMP_ReadedBufferQueue;
OSMessageQueue daMP_ReadedBufferQueue2;
OSMessage daMP_FreeReadBufferMessage[10];
OSMessage daMP_ReadedBufferMessage[10];
OSMessage daMP_ReadedBufferMessage2[10];
OSThread daMP_ReadThread;
u8 daMP_ReadThreadStack[0x1000];

BOOL daMP_VideoDecodeThreadCreated;
OSThread daMP_VideoDecodeThread;
u8 daMP_VideoDecodeThreadStack[0x64000];

OSMessageQueue daMP_FreeTextureSetQueue;
OSMessageQueue daMP_DecodedTextureSetQueue;
OSMessage daMP_FreeTextureSetMessage[3];
OSMessage daMP_DecodedTextureSetMessage[3];

BOOL daMP_First;

BOOL daMP_AudioDecodeThreadCreated;
OSThread daMP_AudioDecodeThread;
u8 daMP_AudioDecodeThreadStack[0x64000];
OSMessageQueue daMP_FreeAudioBufferQueue;
OSMessageQueue daMP_DecodedAudioBufferQueue;
OSMessage daMP_FreeAudioBufferMessage[3];
OSMessage daMP_DecodedAudioBufferMessage[3];

BOOL daMP_Initialized;
u8 daMP_WorkBuffer[0x40];
OSMessageQueue daMP_PrepareReadyQueue;
OSMessageQueue daMP_UsedTextureSetQueue;
OSMessage daMP_PrepareReadyMessage;
OSMessage daMP_UsedTextureSetMessage[3];
VIRetraceCallback daMP_OldVIPostCallback;

u32 daMP_SoundBufferIndex;
u32 daMP_OldAIDCallback;

s16 daMP_SoundBuffer[0x460][2];

u32 daMP_DrawPosX;
u32 daMP_DrawPosY;
THPVideoInfo daMP_videoInfo;
THPAudioInfo daMP_audioInfo;

BOOL daMP_Fail_alloc;
u16 daMP_backup_FrameRate;
u8 daMP_backup_vfilter[7];

daMP_Dlst_base_c daMP_c_Dlst_base;

extern "C" {

/* 000000EC-00000584       .text THPAudioDecode */
void THPAudioDecode() {
    /* Nonmatching */
}

/* 00000584-00000614       .text __THPAudioGetNewSample */
void __THPAudioGetNewSample() {
    /* Nonmatching */
}

/* 00000614-00000650       .text __THPAudioInitialize */
void __THPAudioInitialize() {
    /* Nonmatching */
}

/* 00000650-00000894       .text THPVideoDecode */
void THPVideoDecode() {
    /* Nonmatching */
}

/* 00000894-000008DC       .text __THPSetupBuffers */
void __THPSetupBuffers() {
    /* Nonmatching */
}

/* 000008DC-00000A1C       .text __THPReadFrameHeader */
void __THPReadFrameHeader() {
    /* Nonmatching */
}

/* 00000A1C-00000B48       .text __THPReadScaneHeader */
void __THPReadScaneHeader() {
    /* Nonmatching */
}

/* 00000B48-00000EFC       .text __THPReadQuantizationTable */
void __THPReadQuantizationTable() {
    /* Nonmatching */
}

/* 00000EFC-000010E4       .text __THPReadHuffmanTableSpecification */
void __THPReadHuffmanTableSpecification() {
    /* Nonmatching */
}

/* 000010E4-000011C4       .text __THPHuffGenerateSizeTable */
void __THPHuffGenerateSizeTable() {
    /* Nonmatching */
}

/* 000011C4-00001238       .text __THPHuffGenerateCodeTable */
void __THPHuffGenerateCodeTable() {
    /* Nonmatching */
}

/* 00001238-00001330       .text __THPHuffGenerateDecoderTables */
void __THPHuffGenerateDecoderTables() {
    /* Nonmatching */
}

/* 00001330-0000138C       .text __THPRestartDefinition */
void __THPRestartDefinition() {
    /* Nonmatching */
}

/* 0000138C-000015CC       .text __THPPrepBitStream */
void __THPPrepBitStream() {
    /* Nonmatching */
}

/* 000015CC-000016B0       .text __THPDecompressYUV */
void __THPDecompressYUV() {
    /* Nonmatching */
}

/* 000016B0-000016D0       .text __THPGQRRestore */
void __THPGQRRestore() {
    /* Nonmatching */
}

/* 000016D0-00001704       .text __THPGQRSetup */
void __THPGQRSetup() {
    /* Nonmatching */
}

/* 00001704-00001944       .text __THPDecompressiMCURow512x448 */
void __THPDecompressiMCURow512x448() {
    /* Nonmatching */
}

/* 00001944-00001DE4       .text __THPInverseDCTY8 */
void __THPInverseDCTY8() {
    /* Nonmatching */
}

/* 00001DE4-0000227C       .text __THPInverseDCTNoYPos */
void __THPInverseDCTNoYPos() {
    /* Nonmatching */
}

/* 0000227C-000024C0       .text __THPDecompressiMCURow640x480 */
void __THPDecompressiMCURow640x480() {
    /* Nonmatching */
}

/* 000024C0-00002714       .text __THPDecompressiMCURowNxN */
void __THPDecompressiMCURowNxN() {
    /* Nonmatching */
}

/* 00002714-00002B20       .text __THPHuffDecodeDCTCompY */
void __THPHuffDecodeDCTCompY() {
    /* Nonmatching */
}

/* 00002B20-00002D98       .text __THPHuffDecodeTab */
void __THPHuffDecodeTab() {
    /* Nonmatching */
}

/* 00002D98-00002F80       .text __THPHuffDecodeDCTCompU */
void __THPHuffDecodeDCTCompU() {
    /* Nonmatching */
}

/* 00002F80-00003168       .text __THPHuffDecodeDCTCompV */
void __THPHuffDecodeDCTCompV() {
    /* Nonmatching */
}

/* 00003168-000031D4       .text THPInit */
void THPInit() {
    /* Nonmatching */
}

// /* 000031D4-00003208       .text OSInitFastCast */
// void OSInitFastCast() {
//     /* Nonmatching */
// }

};

/* 00003208-0000323C       .text daMP_PopReadedBuffer__Fv */
void* daMP_PopReadedBuffer() {
    OSMessage msg;
    OSReceiveMessage(&daMP_ReadedBufferQueue, &msg, 1);
    return msg;
}

/* 0000323C-0000326C       .text daMP_PushReadedBuffer__FPv */
void daMP_PushReadedBuffer(void* r3) {
    OSMessage msg = (OSMessage)r3;
    OSSendMessage(&daMP_ReadedBufferQueue, msg, 1);
}

/* 0000326C-000032A0       .text daMP_PopFreeReadBuffer__Fv */
daMP_THPReadBuffer* daMP_PopFreeReadBuffer() {
    OSMessage msg;
    OSReceiveMessage(&daMP_FreeReadBufferQueue, &msg, 1);
    return (daMP_THPReadBuffer*)msg;
}

/* 000032A0-000032D0       .text daMP_PushFreeReadBuffer__FPv */
void daMP_PushFreeReadBuffer(void* r3) {
    OSMessage msg = (OSMessage)r3;
    OSSendMessage(&daMP_FreeReadBufferQueue, msg, 1);
}

/* 000032D0-00003304       .text daMP_PopReadedBuffer2__Fv */
void* daMP_PopReadedBuffer2() {
    OSMessage msg;
    OSReceiveMessage(&daMP_ReadedBufferQueue2, &msg, 1);
    return msg;
}

/* 00003304-00003334       .text daMP_PushReadedBuffer2__FPv */
void daMP_PushReadedBuffer2(void* r3) {
    OSMessage msg = (OSMessage)r3;
    OSSendMessage(&daMP_ReadedBufferQueue2, msg, 1);
}

/* 00003334-0000336C       .text daMP_ReadThreadStart__Fv */
void daMP_ReadThreadStart() {
    if (daMP_ReadThreadCreated) {
        OSResumeThread(&daMP_ReadThread);
    }
}

/* 0000336C-000033B0       .text daMP_ReadThreadCancel__Fv */
void daMP_ReadThreadCancel() {
    if (daMP_ReadThreadCreated) {
        OSCancelThread(&daMP_ReadThread);
        daMP_ReadThreadCreated = FALSE;
    }
}

/* 000033B0-00003494       .text daMP_Reader__FPv */
void daMP_Reader(void*) {
    /* Nonmatching - regalloc */
    s32 r28 = 0;
    s32 r30 = daMP_ActivePlayer.mB8;
    s32 r29 = daMP_ActivePlayer.mBC;
    while (true) {
        daMP_THPReadBuffer* readBuf = daMP_PopFreeReadBuffer();
        int readBytes = DVDReadPrio(&daMP_ActivePlayer.mFileInfo, readBuf->m00, r29, r30, 2);
        if (readBytes != r29) {
            if (readBytes == -1) {
                daMP_ActivePlayer.mA8 = -1;
            }
            if (r28 == 0) {
                daMP_PrepareReady(0);
            }
            OSSuspendThread(&daMP_ReadThread);
        }
        readBuf->m04 = r28;
        daMP_PushReadedBuffer(readBuf);
        r30 += r29;
        r29 = daMP_NEXT_READ_SIZE(readBuf);
        u32 r0 = (r28 + daMP_ActivePlayer.mC0) % daMP_ActivePlayer.m50;
        if (r0 == daMP_ActivePlayer.m50 - 1) {
            if (daMP_ActivePlayer.mA6 & 0x01) {
                r30 = daMP_ActivePlayer.m64;
            } else {
                OSSuspendThread(&daMP_ReadThread);
            }
        }
        r28++;
    }
}

/* 000034A0-00003550       .text daMP_CreateReadThread__Fl */
void daMP_CreateReadThread(s32) {
    /* Nonmatching */
}

/* 00003550-00003584       .text daMP_PopFreeTextureSet__Fv */
OSMessage daMP_PopFreeTextureSet() {
    OSMessage msg;
    OSReceiveMessage(&daMP_FreeTextureSetQueue, &msg, 1);
    return msg;
}

/* 00003584-000035B4       .text daMP_PushFreeTextureSet__FPv */
void daMP_PushFreeTextureSet(void* r3) {
    OSMessage msg = (OSMessage)r3;
    OSSendMessage(&daMP_FreeTextureSetQueue, msg, 0);
}

/* 000035B4-000035F8       .text daMP_PopDecodedTextureSet__Fl */
void* daMP_PopDecodedTextureSet(s32 r3) {
    OSMessage msg;
    if (OSReceiveMessage(&daMP_DecodedTextureSetQueue, &msg, r3) == TRUE) {
        return msg;
    } else {
        return NULL;
    }
}

/* 000035F8-00003628       .text daMP_PushDecodedTextureSet__FPv */
void daMP_PushDecodedTextureSet(void* r3) {
    OSMessage msg = (OSMessage)r3;
    OSSendMessage(&daMP_DecodedTextureSetQueue, msg, 1);
}

/* 00003628-00003760       .text daMP_VideoDecode__FP18daMP_THPReadBuffer */
void daMP_VideoDecode(daMP_THPReadBuffer*) {
    /* Nonmatching */
}

/* 00003760-00003828       .text daMP_VideoDecoder__FPv */
void daMP_VideoDecoder(void*) {
    /* Nonmatching */
}

/* 00003828-0000395C       .text daMP_VideoDecoderForOnMemory__FPv */
void daMP_VideoDecoderForOnMemory(void*) {
    /* Nonmatching */
}

/* 0000395C-00003A74       .text daMP_CreateVideoDecodeThread__FlPUc */
void daMP_CreateVideoDecodeThread(s32, u8*) {
    /* Nonmatching */
}

/* 00003A74-00003AAC       .text daMP_VideoDecodeThreadStart__Fv */
void daMP_VideoDecodeThreadStart() {
    if (daMP_VideoDecodeThreadCreated) {
        OSResumeThread(&daMP_VideoDecodeThread);
    }
}

/* 00003AAC-00003AF0       .text daMP_VideoDecodeThreadCancel__Fv */
void daMP_VideoDecodeThreadCancel() {
    if (daMP_VideoDecodeThreadCreated) {
        OSCancelThread(&daMP_VideoDecodeThread);
        daMP_VideoDecodeThreadCreated = FALSE;
    }
}

/* 00003AF0-00003B24       .text daMP_PopFreeAudioBuffer__Fv */
void daMP_PopFreeAudioBuffer() {
    /* Nonmatching */
}

/* 00003B24-00003B54       .text daMP_PushFreeAudioBuffer__FPv */
void daMP_PushFreeAudioBuffer(void*) {
    /* Nonmatching */
}

/* 00003B54-00003B98       .text daMP_PopDecodedAudioBuffer__Fl */
void daMP_PopDecodedAudioBuffer(s32) {
    /* Nonmatching */
}

/* 00003B98-00003BC8       .text daMP_PushDecodedAudioBuffer__FPv */
void daMP_PushDecodedAudioBuffer(void*) {
    /* Nonmatching */
}

/* 00003BC8-00003CA4       .text daMP_AudioDecode__FP18daMP_THPReadBuffer */
void daMP_AudioDecode(daMP_THPReadBuffer*) {
    /* Nonmatching */
}

/* 00003CA4-00003CCC       .text daMP_AudioDecoder__FPv */
void daMP_AudioDecoder(void*) {
    /* Nonmatching */
}

/* 00003CCC-00003D74       .text daMP_AudioDecoderForOnMemory__FPv */
void daMP_AudioDecoderForOnMemory(void*) {
    /* Nonmatching */
}

/* 00003D74-00003E70       .text daMP_CreateAudioDecodeThread__FlPUc */
void daMP_CreateAudioDecodeThread(s32, u8*) {
    /* Nonmatching */
}

/* 00003E70-00003EA8       .text daMP_AudioDecodeThreadStart__Fv */
void daMP_AudioDecodeThreadStart() {
    if (daMP_AudioDecodeThreadCreated) {
        OSResumeThread(&daMP_AudioDecodeThread);
    }
}

/* 00003EA8-00003EEC       .text daMP_AudioDecodeThreadCancel__Fv */
void daMP_AudioDecodeThreadCancel() {
    if (daMP_AudioDecodeThreadCreated) {
        OSCancelThread(&daMP_AudioDecodeThread);
        daMP_AudioDecodeThreadCreated = FALSE;
    }
}

/* 00003EEC-00004004       .text daMP_THPGXRestore__Fv */
void daMP_THPGXRestore() {
    /* Nonmatching */
}

/* 00004004-000044BC       .text daMP_THPGXYuv2RgbSetup__FPC16_GXRenderModeObj */
void daMP_THPGXYuv2RgbSetup(const GXRenderModeObj*) {
    /* Nonmatching */
}

/* 000044E4-000046F8       .text daMP_THPGXYuv2RgbDraw__FPUcPUcPUcssssss */
void daMP_THPGXYuv2RgbDraw(u8*, u8*, u8*, s16, s16, s16, s16, s16, s16) {
    /* Nonmatching */
}

/* 00004720-0000494C       .text daMP_MixAudio__FPsPsUl */
void daMP_MixAudio(s16*, s16*, u32) {
    /* Nonmatching */
}

/* 0000494C-00004A04       .text daMP_audioCallbackWithMSound__Fl */
void daMP_audioCallbackWithMSound(s32) {
    /* Nonmatching */
}

/* 00004A04-00004A30       .text daMP_audioInitWithMSound__Fv */
void daMP_audioInitWithMSound() {
    /* Nonmatching */
}

/* 00004A30-00004A58       .text daMP_audioQuitWithMSound__Fv */
void daMP_audioQuitWithMSound() {
    /* Nonmatching */
}

/* 00004A58-00004A88       .text daMP_PushUsedTextureSet__FPv */
void daMP_PushUsedTextureSet(void*) {
    /* Nonmatching */
}

/* 00004A88-00004ACC       .text daMP_PopUsedTextureSet__Fv */
void daMP_PopUsedTextureSet() {
    /* Nonmatching */
}

/* 00004ACC-00004BA4       .text daMP_THPPlayerInit__Fl */
void daMP_THPPlayerInit(s32) {
    /* Nonmatching */
}

/* 00004BA4-00004BD4       .text daMP_THPPlayerQuit__Fv */
void daMP_THPPlayerQuit() {
    /* Nonmatching */
}

/* 00004BD4-00004FB4       .text daMP_THPPlayerOpen__FPCci */
void daMP_THPPlayerOpen(const char*, int) {
    /* Nonmatching */
}

/* 00004FB4-00005008       .text daMP_THPPlayerClose__Fv */
void daMP_THPPlayerClose() {
    /* Nonmatching */
}

/* 00005008-000050B8       .text daMP_THPPlayerCalcNeedMemory__Fv */
void daMP_THPPlayerCalcNeedMemory() {
    /* Nonmatching */
}

/* 000050B8-000052D0       .text daMP_THPPlayerSetBuffer__FPUc */
void daMP_THPPlayerSetBuffer(u8*) {
    /* Nonmatching */
}

/* 000052D0-000053A4       .text daMP_InitAllMessageQueue__Fv */
void daMP_InitAllMessageQueue() {
    /* Nonmatching */
}

/* 000053A4-00005410       .text daMP_ProperTimingForStart__Fv */
void daMP_ProperTimingForStart() {
    /* Nonmatching */
}

/* 00005410-00005554       .text daMP_ProperTimingForGettingNextFrame__Fv */
void daMP_ProperTimingForGettingNextFrame() {
    /* Nonmatching */
}

/* 00005554-00005810       .text daMP_PlayControl__FUl */
void daMP_PlayControl(u32) {
    /* Nonmatching */
}

/* 00005810-00005850       .text daMP_WaitUntilPrepare__Fv */
s32 daMP_WaitUntilPrepare() {
    OSMessage msg;
    OSReceiveMessage(&daMP_PrepareReadyQueue, &msg, 1);
    u32 temp = (s32)msg;
    return (-temp | temp) >> 31; // fakematch? should be temp != 0;
}

/* 00005850-00005880       .text daMP_PrepareReady__Fi */
void daMP_PrepareReady(int r3) {
    OSMessage msg = (OSMessage)r3;
    OSSendMessage(&daMP_PrepareReadyQueue, msg, 1);
}

/* 00005880-00005B68       .text daMP_THPPlayerPrepare__Flll */
void daMP_THPPlayerPrepare(s32, s32, s32) {
    /* Nonmatching */
}

/* 00005B68-00005BAC       .text daMP_THPPlayerDrawDone__Fv */
void daMP_THPPlayerDrawDone() {
    /* Nonmatching */
}

/* 00005BAC-00005C0C       .text daMP_THPPlayerPlay__Fv */
void daMP_THPPlayerPlay() {
    /* Nonmatching */
}

/* 00005C0C-00005CCC       .text daMP_THPPlayerStop__Fv */
void daMP_THPPlayerStop() {
    /* Nonmatching */
}

/* 00005CCC-00005DAC       .text daMP_THPPlayerDrawCurrentFrame__FPC16_GXRenderModeObjUlUlUlUl */
void daMP_THPPlayerDrawCurrentFrame(const GXRenderModeObj*, u32, u32, u32, u32) {
    /* Nonmatching */
}

/* 00005DAC-00005DF4       .text daMP_THPPlayerGetVideoInfo__FP12THPVideoInfo */
void daMP_THPPlayerGetVideoInfo(THPVideoInfo*) {
    /* Nonmatching */
}

/* 00005DF4-00005E3C       .text daMP_THPPlayerGetAudioInfo__FP12THPAudioInfo */
void daMP_THPPlayerGetAudioInfo(THPAudioInfo*) {
    /* Nonmatching */
}

/* 00005E3C-00005E60       .text daMP_THPPlayerGetTotalFrame__Fv */
void daMP_THPPlayerGetTotalFrame() {
    /* Nonmatching */
}

/* 00005E60-00005E70       .text daMP_THPPlayerGetState__Fv */
void daMP_THPPlayerGetState() {
    /* Nonmatching */
}

/* 00005E70-00005F9C       .text daMP_THPPlayerSetVolume__Fll */
void daMP_THPPlayerSetVolume(s32, s32) {
    /* Nonmatching */
}

/* 00005F9C-00006104       .text daMP_ActivePlayer_Init__FPCc */
BOOL daMP_ActivePlayer_Init(const char*) {
    /* Nonmatching */
}

/* 0000611C-0000615C       .text daMP_ActivePlayer_Finish__Fv */
void daMP_ActivePlayer_Finish() {
    /* Nonmatching */
}

/* 00006180-000061DC       .text daMP_ActivePlayer_Main__Fv */
void daMP_ActivePlayer_Main() {
    /* Nonmatching */
}

/* 000061DC-00006230       .text daMP_ActivePlayer_Draw__Fv */
void daMP_ActivePlayer_Draw() {
    /* Nonmatching */
}

/* 00006230-000062F0       .text daMP_Get_MovieRestFrame__Fv */
u32 daMP_Get_MovieRestFrame() {
    /* Nonmatching */
}

/* 000062F0-00006370       .text daMP_Set_PercentMovieVolume__Ff */
u32 daMP_Set_PercentMovieVolume(f32) {
    /* Nonmatching */
}

/* 00006370-00006390       .text daMP_c_Get_arg_data__6daMP_cFv */
u32 daMP_c::daMP_c_Get_arg_data() {
    return fopAcM_GetParam(this);
}

/* 00006390-00006500       .text daMP_c_Init__6daMP_cFv */
int daMP_c::daMP_c_Init() {
    /* Nonmatching */
    static u8 set_vfilter[7] = {
        0x00, 0x00, 0x15, 0x16, 0x15, 0x00, 0x00,
    };
    static const char* filename_table[2] = {
        "/thpdemo/title_loop.thp",
        "/thpdemo/end_st_epilogue.thp",
    };
    
    daMP_backup_FrameRate = mDoGph_gInf_c::getFrameRate();
    mDoGph_gInf_c::setFrameRate(1);
    GXRenderModeObj* renderMode = JUTVideo::getManager()->getRenderMode();
    // daMP_backup_vfilter = renderMode->vfilter;
    // renderMode->vfilter = set_vfilter;
    daMP_Fail_alloc = FALSE;
    mpCallBack1 = daMP_Get_MovieRestFrame;
    mpCallBack2 = daMP_Set_PercentMovieVolume;
    int r4 = daMP_c_Get_arg_data();
    if (r4 >= 0 && r4 < 2) {
        if (filename_table[r4] == NULL || !daMP_ActivePlayer_Init(filename_table[r4])) {
            daMP_Fail_alloc = TRUE;
            return cPhs_COMPLEATE_e;
        }
    } else {
        OSReport("\x1B[43;30mムービーの番号がおかしい %d %d\n\x1B[m", r4, 2);
        if (!daMP_ActivePlayer_Init(filename_table[0])) {
            daMP_Fail_alloc = TRUE;
        }
    }
    return cPhs_COMPLEATE_e;
}

/* 00006580-000065F8       .text daMP_c_Finish__6daMP_cFv */
BOOL daMP_c::daMP_c_Finish() {
    /* Nonmatching */
}

/* 000065F8-0000661C       .text daMP_c_Main__6daMP_cFv */
BOOL daMP_c::daMP_c_Main() {
    daMP_ActivePlayer_Main();
    return TRUE;
}

/* 0000661C-0000663C       .text draw__16daMP_Dlst_base_cFv */
void daMP_Dlst_base_c::draw() {
    daMP_ActivePlayer_Draw();
}

/* 0000663C-00006668       .text daMP_c_Draw__6daMP_cFv */
BOOL daMP_c::daMP_c_Draw() {
    dComIfGd_set2DOpa(&daMP_c_Dlst_base);
    return TRUE;
}

/* 000066C4-00006728       .text daMP_c_Callback_Init__6daMP_cFP10fopAc_ac_c */
int daMP_c::daMP_c_Callback_Init(fopAc_ac_c* i_this) {
    fopAcM_SetupActor(i_this, daMP_c);
    daMP_c* a_this = (daMP_c*)i_this;
    return a_this->daMP_c_Init();
}

/* 00006728-00006748       .text daMP_c_Callback_Finish__6daMP_cFP6daMP_c */
BOOL daMP_c::daMP_c_Callback_Finish(daMP_c* i_this) {
    return i_this->daMP_c_Finish();
}

/* 00006748-00006780       .text daMP_c_Callback_Main__6daMP_cFP6daMP_c */
BOOL daMP_c::daMP_c_Callback_Main(daMP_c* i_this) {
    if (daMP_Fail_alloc) {
        return TRUE;
    }
    return i_this->daMP_c_Main();
}

/* 00006780-000067B8       .text daMP_c_Callback_Draw__6daMP_cFP6daMP_c */
BOOL daMP_c::daMP_c_Callback_Draw(daMP_c* i_this) {
    if (daMP_Fail_alloc) {
        return TRUE;
    }
    return i_this->daMP_c_Draw();
}

/* 000067B8-000067C0       .text daMP_Callback_Dummy__FP6daMP_c */
static BOOL daMP_Callback_Dummy(daMP_c* i_this) {
    return TRUE;
}

static actor_method_class daMP_METHODS = {
    (process_method_func)daMP_c::daMP_c_Callback_Init,
    (process_method_func)daMP_c::daMP_c_Callback_Finish,
    (process_method_func)daMP_c::daMP_c_Callback_Main,
    (process_method_func)daMP_Callback_Dummy,
    (process_method_func)daMP_c::daMP_c_Callback_Draw,
};

actor_process_profile_definition g_profile_MP = {
    /* LayerID      */ fpcLy_CURRENT_e,
    /* ListID       */ 0x0007,
    /* ListPrio     */ fpcPi_CURRENT_e,
    /* ProcName     */ PROC_MP,
    /* Proc SubMtd  */ &g_fpcLf_Method.base,
    /* Size         */ sizeof(daMP_c),
    /* SizeOther    */ 0,
    /* Parameters   */ 0,
    /* Leaf SubMtd  */ &g_fopAc_Method.base,
    /* Priority     */ 0x000B,
    /* Actor SubMtd */ &daMP_METHODS,
    /* Status       */ fopAcStts_NOPAUSE_e | fopAcStts_UNK40000_e,
    /* Group        */ fopAc_ACTOR_e,
    /* CullType     */ fopAc_CULLBOX_CUSTOM_e,
};
