//
// Generated by dtk
// Translation Unit: d_a_rd.cpp
//

#include "d/actor/d_a_rd.h"
#include "d/d_procname.h"
#include "f_op/f_op_actor_mng.h"
#include "JSystem/JKernel/JKRHeap.h"
#include "d/d_com_inf_game.h"

// Needed for the .data section to match.
static Vec dummy1 = {1.0f, 1.0f, 1.0f};
static Vec dummy2 = {1.0f, 1.0f, 1.0f};
static u8 dummy3[4] = {0x02, 0x00, 0x02, 0x01};
static f64 dummy4[2] = {3.0, 0.5};

static daRd_HIO_c l_HIO;

const u32 daRd_c::m_heapsize = 0x2520;
const char daRd_c::m_arc_name[] = "Rd";
const dCcD_SrcCyl daRd_c::m_cyl_src = {
    // dCcD_SrcGObjInf
    {
        /* Flags             */ 0,
        /* SrcObjAt Type     */ 0,
        /* SrcObjAt Atp      */ 0,
        /* SrcObjAt SPrm     */ 0,
        /* SrcObjTg Type     */ ~(AT_TYPE_WATER | AT_TYPE_UNK20000 | AT_TYPE_LEAF_WIND | AT_TYPE_UNK400000),
        /* SrcObjTg SPrm     */ 0x09,
        /* SrcObjCo SPrm     */ 0x7F,
        /* SrcGObjAt Se      */ 0,
        /* SrcGObjAt HitMark */ 0,
        /* SrcGObjAt Spl     */ 0,
        /* SrcGObjAt Mtrl    */ 0,
        /* SrcGObjAt GFlag   */ 0,
        /* SrcGObjTg Se      */ 0x23,
        /* SrcGObjTg HitMark */ 0,
        /* SrcGObjTg Spl     */ 0,
        /* SrcGObjTg Mtrl    */ 0,
        /* SrcGObjTg GFlag   */ 0x06,
        /* SrcGObjCo GFlag   */ 0,
    },
    // cM3dGCylS
    {
        /* Center */ 0.0f, 0.0f, 0.0f,
        /* Radius */ 0.0f,
        /* Height */ 0.0f,
    },
};

enum RD_RES_FILE_ID { // IDs and indexes are synced
    /* BCKS */
    RD_BCK_ATACK=0x6,
    RD_BCK_ATACK2WALK=0x7,
    RD_BCK_BEAM=0x8,
    RD_BCK_BEAM_END=0x9,
    RD_BCK_BEAM_HIT=0xA,
    RD_BCK_DAMAGE=0xB,
    RD_BCK_DEAD=0xC,
    RD_BCK_IKARI_SAMPLE=0xD,
    RD_BCK_KANOKEP=0xE,
    RD_BCK_SUWARIP=0xF,
    RD_BCK_SUWARU=0x10,
    RD_BCK_TACHIP=0x11,
    RD_BCK_TATSU=0x12,
    RD_BCK_WALK=0x13,
    RD_BCK_WALK2ATACK=0x14,
    
    /* BDLM */
    RD_BDL_RD=0x17,
    
    /* BRK */
    RD_BRK_BEAM=0x1A,
    RD_BRK_BEAM_END=0x1B,
    RD_BRK_BEAM_HIT=0x1C,
    RD_BRK_NML=0x1D,
    
    /* BTK */
    RD_BTK_RD_CLOSE=0x20,
    RD_BTK_RD_IKARI=0x21,
    RD_BTK_RD_NML=0x22,
    RD_BTK_RD_OPEN=0x23,
};

/* 000000EC-0000027C       .text __ct__10daRd_HIO_cFv */
daRd_HIO_c::daRd_HIO_c() {
    m2C = 0x0;
    m30 = 650.0f;
    m34 = 650.0f;
    m38 = 500.0f;
    m3C = 125.0f;
    m40 = 0x2000;
    m42 = 0x1B58;
    m44 = 0x6000;
    m46 = 0xA;
    m48 = 0x5;
    m4A = 0x3C;
    m4C = 0x32;
    m4E = 0x384;
    m58 = 10.0f;
    m5C = 10.0f;
    m60 = 50.0f;
    m64 = 30.0f;
    m68 = 1.8;
    m6C = 2.0f;
    m70 = 1.25;
    m74 = 0.9;
    m50 = 0x28;
    m78 = 0x2D;
    m54 = 0x87;
    m52 = 0x96;
    m7A = 0x3C;
    m04.m04 = -20.0f;
    m04.m08 = 0x1FFE;
    m04.m0C = 0x4000;
    m04.m0A = 0x0;
    m04.m0E = 0x2000;
    m04.m10 = -0x9C4;
    m04.m14 = -0x4000;
    m04.m12 = 0x0;
    m04.m16 = -0x2000;
    m04.m18 = 0x250;
    m04.m1A = 0x150;
    m04.m1C = 50.0f;
    m04.m20 = 0x7FFF;
    m04.m22 = 0x0;
    m04.m24 = 400.0f;
}

/* 0000027C-000002A8       .text searchNeadDeadRd_CB__FPvPv */
static fopAc_ac_c* searchNeadDeadRd_CB(void* i_actor, void* i_this) {
    return static_cast<daRd_c*>(i_this)->_searchNearDeadRd(static_cast<fopAc_ac_c*>(i_actor));
}

/* 000002A8-0000030C       .text _searchNearDeadRd__6daRd_cFP10fopAc_ac_c */
fopAc_ac_c* daRd_c::_searchNearDeadRd(fopAc_ac_c* i_actor) {
    if (fopAcM_GetName(i_actor) == PROC_RD) {
        daRd_c* other = static_cast<daRd_c*>(i_actor);
        if (other->mMode == 3) {
            if (fopAcM_searchActorDistanceXZ(this, i_actor) < l_HIO.m34) {
                return i_actor;
            }
        }
    }
    return FALSE;
}

/* 0000030C-00000358       .text nodeControl_CB__FP7J3DNodei */
static BOOL nodeControl_CB(J3DNode* node, int param_1) {
    if (!param_1) {
        J3DModel* model = j3dSys.getModel();
        daRd_c* i_this = reinterpret_cast<daRd_c*>(model->getUserArea());
        if (i_this) {
            i_this->_nodeControl(node, model);
        }
    }
    return TRUE;
}

/* 00000358-00000514       .text _nodeControl__6daRd_cFP7J3DNodeP8J3DModel */
BOOL daRd_c::_nodeControl(J3DNode* node, J3DModel* model) {
    /* Nonmatching */
}

/* 00000550-0000059C       .text nodeHeadControl_CB__FP7J3DNodei */
static BOOL nodeHeadControl_CB(J3DNode* node, int param_1) {
    if (!param_1) {
        J3DModel* model = j3dSys.getModel();
        daRd_c* i_this = reinterpret_cast<daRd_c*>(model->getUserArea());
        if (i_this) {
            i_this->_nodeHeadControl(node, model);
        }
    }
    return TRUE;
}

/* 0000059C-000006A0       .text _nodeHeadControl__6daRd_cFP7J3DNodeP8J3DModel */
BOOL daRd_c::_nodeHeadControl(J3DNode* node, J3DModel* model) {
    /* Nonmatching */
}

/* 000006A0-000006C0       .text createHeap_CB__FP10fopAc_ac_c */
static BOOL createHeap_CB(fopAc_ac_c* i_this) {
    return static_cast<daRd_c*>(i_this)->_createHeap();
}

/* 000006C0-0000096C       .text _createHeap__6daRd_cFv */
BOOL daRd_c::_createHeap() {
    J3DModelData* modelData = static_cast<J3DModelData*>(dComIfG_getObjectRes(m_arc_name, RD_BDL_RD));
	JUT_ASSERT(504, modelData != 0);
    
    mpMorf = new mDoExt_McaMorf(
        modelData,
        NULL, NULL,
        static_cast<J3DAnmTransformKey*>(dComIfG_getObjectRes(m_arc_name, RD_BCK_SUWARIP)),
        J3DFrameCtrl::LOOP_REPEAT_e, 1.0f, 0, -1, 1,
        NULL,
        0x00080000,
        0x37441622
    );
    if (mpMorf == NULL || mpMorf->getModel() == NULL) {
        return FALSE;
    }
    mpMorf->getModel()->setUserArea(reinterpret_cast<u32>(this));
    
    if (!mInvisModel.create(mpMorf->getModel())) {
        return FALSE;
    }
    
    J3DAnmTextureSRTKey* btk = static_cast<J3DAnmTextureSRTKey*>(dComIfG_getObjectRes(m_arc_name, RD_BTK_RD_CLOSE));
	JUT_ASSERT(525, btk != 0);
    if (!mBtkAnm.init(modelData, btk, true, 0, 1.0f, 0, -1, false, 0)) {
        return FALSE;
    }
    
    modelData->getJointNodePointer(0x0C)->setCallBack(nodeHeadControl_CB);
    
    J3DAnmTevRegKey* brk = static_cast<J3DAnmTevRegKey*>(dComIfG_getObjectRes(m_arc_name, RD_BRK_NML));
	JUT_ASSERT(550, brk != 0);
    if (!mBrkAnm.init(modelData, brk, true, 0, 1.0f, 0, -1, false, 0)) {
        return FALSE;
    }
    
    return createArrowHeap() ? TRUE : FALSE;
}

/* 0000096C-000009D0       .text createArrowHeap__6daRd_cFv */
bool daRd_c::createArrowHeap() {
    static Vec sebone_cyl_offset[] = {{0.0f, 0.0f, 0.0f},    {30.0f, 0.0f, 0.0f}};
    static Vec muneA_cyl_offset[]  = {{5.0f, -5.0f, 0.0f},   {20.0f, -5.0f, 0.0f}};
    static Vec muneB1_cyl_offset[] = {{15.0, 0.0, -15.0},    {50.0, 0.0, -15.0}};
    static Vec muneB2_cyl_offset[] = {{15.0f, 0.0f, 0.0f},   {50.0f, 0.0f, 0.0f}};
    static Vec muneB3_cyl_offset[] = {{15.0f, 0.0f, 15.0f},  {50.0f, 0.0f, 15.0f}};
    static Vec kosi1_cyl_offset[]  = {{0.0f, 0.0f, -10.0f},  {20.0f, 0.0f, -10.0f}};
    static Vec kosi2_cyl_offset[]  = {{0.0f, 0.0f, 0.0f},    {20.0f, 0.0f, 0.0f}};
    static Vec kosi3_cyl_offset[]  = {{0.0f, 0.0f, 10.0f},   {20.0f, 0.0f, 10.0f}};
    static Vec asi1_cyl_offset[]   = {{-8.0f, 0.0f, 0.0f},   {30.0f, 0.0f, 0.0f}};
    static Vec asi2_cyl_offset[]   = {{-3.0f, 0.0f, 0.0f},   {15.0f, 0.0f, 0.0f}};
    static Vec asi3_cyl_offset[]   = {{0.0f, 0.0f, 0.0f},    {11.0f, 0.0f, 0.0f}};
    static Vec head_sph_offset[]   = {{30.0f, 0.0f, -5.0f}};
    static Vec ude1_cyl_offset[]   = {{-5.0f, -8.0f, -1.0f}, {60.0f, 4.0f, 1.0f}};
    static Vec ude2_cyl_offset[]   = {{-3.0f, 0.0f, 0.0f},   {55.0f, 0.0f, 0.0f}};
    static Vec te_cyl_offset[]     = {{8.0f, 2.0f, 0.0f},    {30.0f, 2.0f, 0.0f}};
    static Vec yubi_cyl_offset[]   = {{0.0f, 0.0f, 0.0f},    {17.0f, 0.0f, 0.0f}};
    static __jnt_hit_data_c search_data[] = {
        {
            /* mShapeType  */ 0, // Cylinder
            /* mJointIndex */ 0x01,
            /* mRadius     */ 4.0f,
            /* mpOffsets   */ (cXyz*)&kosi1_cyl_offset,
        },
        {
            /* mShapeType  */ 0, // Cylinder
            /* mJointIndex */ 0x01,
            /* mRadius     */ 4.0f,
            /* mpOffsets   */ (cXyz*)&kosi2_cyl_offset,
        },
        {
            /* mShapeType  */ 0, // Cylinder
            /* mJointIndex */ 0x01,
            /* mRadius     */ 4.0f,
            /* mpOffsets   */ (cXyz*)&kosi3_cyl_offset,
        },
        {
            /* mShapeType  */ 0, // Cylinder
            /* mJointIndex */ 0x02,
            /* mRadius     */ 2.0f,
            /* mpOffsets   */ (cXyz*)&asi1_cyl_offset,
        },
        {
            /* mShapeType  */ 0, // Cylinder
            /* mJointIndex */ 0x03,
            /* mRadius     */ 2.0f,
            /* mpOffsets   */ (cXyz*)&asi2_cyl_offset,
        },
        {
            /* mShapeType  */ 0, // Cylinder
            /* mJointIndex */ 0x04,
            /* mRadius     */ 2.0f,
            /* mpOffsets   */ (cXyz*)&asi3_cyl_offset,
        },
        {
            /* mShapeType  */ 0, // Cylinder
            /* mJointIndex */ 0x05,
            /* mRadius     */ 2.0f,
            /* mpOffsets   */ (cXyz*)&asi1_cyl_offset,
        },
        {
            /* mShapeType  */ 0, // Cylinder
            /* mJointIndex */ 0x06,
            /* mRadius     */ 2.0f,
            /* mpOffsets   */ (cXyz*)&asi2_cyl_offset,
        },
        {
            /* mShapeType  */ 0, // Cylinder
            /* mJointIndex */ 0x07,
            /* mRadius     */ 2.0f,
            /* mpOffsets   */ (cXyz*)&asi3_cyl_offset,
        },
        {
            /* mShapeType  */ 0, // Cylinder
            /* mJointIndex */ 0x08,
            /* mRadius     */ 6.0f,
            /* mpOffsets   */ (cXyz*)&sebone_cyl_offset,
        },
        {
            /* mShapeType  */ 0, // Cylinder
            /* mJointIndex */ 0x09,
            /* mRadius     */ 10.0f,
            /* mpOffsets   */ (cXyz*)&muneA_cyl_offset,
        },
        {
            /* mShapeType  */ 0, // Cylinder
            /* mJointIndex */ 0x09,
            /* mRadius     */ 6.0f,
            /* mpOffsets   */ (cXyz*)&muneB1_cyl_offset,
        },
        {
            /* mShapeType  */ 0, // Cylinder
            /* mJointIndex */ 0x09,
            /* mRadius     */ 6.0f,
            /* mpOffsets   */ (cXyz*)&muneB2_cyl_offset,
        },
        {
            /* mShapeType  */ 0, // Cylinder
            /* mJointIndex */ 0x09,
            /* mRadius     */ 6.0f,
            /* mpOffsets   */ (cXyz*)&muneB3_cyl_offset,
        },
        {
            /* mShapeType  */ 0, // Cylinder
            /* mJointIndex */ 0x0F,
            /* mRadius     */ 2.0f,
            /* mpOffsets   */ (cXyz*)&ude1_cyl_offset,
        },
        {
            /* mShapeType  */ 0, // Cylinder
            /* mJointIndex */ 0x10,
            /* mRadius     */ 2.0f,
            /* mpOffsets   */ (cXyz*)&ude2_cyl_offset,
        },
        {
            /* mShapeType  */ 0, // Cylinder
            /* mJointIndex */ 0x11,
            /* mRadius     */ 6.0f,
            /* mpOffsets   */ (cXyz*)&te_cyl_offset,
        },
        {
            /* mShapeType  */ 0, // Cylinder
            /* mJointIndex */ 0x12,
            /* mRadius     */ 6.0f,
            /* mpOffsets   */ (cXyz*)&yubi_cyl_offset,
        },
        {
            /* mShapeType  */ 0, // Cylinder
            /* mJointIndex */ 0x13,
            /* mRadius     */ 2.0f,
            /* mpOffsets   */ (cXyz*)&ude1_cyl_offset,
        },
        {
            /* mShapeType  */ 0, // Cylinder
            /* mJointIndex */ 0x14,
            /* mRadius     */ 2.0f,
            /* mpOffsets   */ (cXyz*)&ude2_cyl_offset,
        },
        {
            /* mShapeType  */ 0, // Cylinder
            /* mJointIndex */ 0x15,
            /* mRadius     */ 6.0f,
            /* mpOffsets   */ (cXyz*)&te_cyl_offset,
        },
        {
            /* mShapeType  */ 0, // Cylinder
            /* mJointIndex */ 0x16,
            /* mRadius     */ 6.0f,
            /* mpOffsets   */ (cXyz*)&yubi_cyl_offset,
        },
    };
    mpJntHit = JntHit_create(mpMorf->getModel(), search_data, ARRAY_SIZE(search_data));
    if (mpJntHit) {
        mJntHit = mpJntHit;
    } else {
        return false;
    }
    return true;
}

/* 000009D0-00000A38       .text checkPlayerInAttack__6daRd_cFv */
void daRd_c::checkPlayerInAttack() {
    /* Nonmatching */
}

/* 00000A38-00000AA0       .text checkPlayerInCry__6daRd_cFv */
void daRd_c::checkPlayerInCry() {
    /* Nonmatching */
}

/* 00000AA0-00000D78       .text lookBack__6daRd_cFv */
void daRd_c::lookBack() {
    /* Nonmatching */
}

/* 00000D78-00001650       .text checkTgHit__6daRd_cFv */
void daRd_c::checkTgHit() {
    /* Nonmatching */
}

/* 00001650-000017D0       .text setCollision__6daRd_cFv */
void daRd_c::setCollision() {
    /* Nonmatching */
}

/* 000017D0-0000180C       .text setIceCollision__6daRd_cFv */
void daRd_c::setIceCollision() {
    /* Nonmatching */
}

/* 0000180C-00001970       .text setAttention__6daRd_cFv */
void daRd_c::setAttention() {
    /* Nonmatching */
}

/* 00001970-000019F8       .text setMtx__6daRd_cFv */
void daRd_c::setMtx() {
    /* Nonmatching */
}

/* 000019F8-00001A3C       .text modeWaitInit__6daRd_cFv */
void daRd_c::modeWaitInit() {
    mAcchCir.SetWallR(60.0f);
    speedF = 0.0f;
}

/* 00001A3C-00001DDC       .text modeWait__6daRd_cFv */
void daRd_c::modeWait() {
    /* Nonmatching */
}

/* 00001DDC-00001E68       .text modeDeathInit__6daRd_cFv */
void daRd_c::modeDeathInit() {
    /* Nonmatching */
}

/* 00001E68-00001F14       .text modeDeath__6daRd_cFv */
void daRd_c::modeDeath() {
    /* Nonmatching */
}

/* 00001F14-00001F98       .text modeDamageInit__6daRd_cFv */
void daRd_c::modeDamageInit() {
    /* Nonmatching */
}

/* 00001F98-00002084       .text modeDamage__6daRd_cFv */
void daRd_c::modeDamage() {
    /* Nonmatching */
}

/* 00002084-000020EC       .text modeParalysisInit__6daRd_cFv */
void daRd_c::modeParalysisInit() {
    /* Nonmatching */
}

/* 000020EC-000021F0       .text modeParalysis__6daRd_cFv */
void daRd_c::modeParalysis() {
    /* Nonmatching */
}

/* 000021F0-0000223C       .text modeMoveInit__6daRd_cFv */
void daRd_c::modeMoveInit() {
    /* Nonmatching */
}

/* 0000223C-000024B0       .text modeMove__6daRd_cFv */
void daRd_c::modeMove() {
    /* Nonmatching */
}

/* 000024B0-000025A8       .text modeCryInit__6daRd_cFv */
void daRd_c::modeCryInit() {
    /* Nonmatching */
}

/* 000025A8-000028B8       .text modeCry__6daRd_cFv */
void daRd_c::modeCry() {
    /* Nonmatching */
}

/* 000028B8-000028CC       .text modeCryWaitInit__6daRd_cFv */
void daRd_c::modeCryWaitInit() {
    m310 = 60;
    m314 = 45;
}

/* 000028CC-000029E4       .text modeCryWait__6daRd_cFv */
void daRd_c::modeCryWait() {
    /* Nonmatching */
}

/* 000029E4-00002A58       .text modeAttackInit__6daRd_cFv */
void daRd_c::modeAttackInit() {
    mAcchCir.SetWallR(70.0f);
    m310 = l_HIO.m52;
    m318 = l_HIO.m50;
    m314 = 30;
    setAnm(6, false);
    speedF = 0.0f;
}

/* 00002A58-00002F30       .text modeAttack__6daRd_cFv */
void daRd_c::modeAttack() {
    /* Nonmatching */
}

/* 00002F30-00002F34       .text modeReturnInit__6daRd_cFv */
void daRd_c::modeReturnInit() {
}

/* 00002F34-00003208       .text modeReturn__6daRd_cFv */
void daRd_c::modeReturn() {
    /* Nonmatching */
}

/* 00003208-0000320C       .text modeSilentPrayInit__6daRd_cFv */
void daRd_c::modeSilentPrayInit() {
}

/* 0000320C-00003400       .text modeSilentPray__6daRd_cFv */
void daRd_c::modeSilentPray() {
    /* Nonmatching */
}

/* 00003400-00003428       .text modeSwWaitInit__6daRd_cFv */
void daRd_c::modeSwWaitInit() {
    setAnm(0xB, false);
}

/* 00003428-00003480       .text modeSwWait__6daRd_cFv */
void daRd_c::modeSwWait() {
    /* Nonmatching */
}

/* 00003480-00003514       .text modeKanokeInit__6daRd_cFv */
void daRd_c::modeKanokeInit() {
    /* Nonmatching */
}

/* 00003514-0000355C       .text modeKanoke__6daRd_cFv */
void daRd_c::modeKanoke() {
    /* Nonmatching */
}

/* 0000355C-000038D4       .text modeProc__6daRd_cFQ26daRd_c6Proc_ei */
void daRd_c::modeProc(daRd_c::Proc_e proc, int newMode) {
    /* Nonmatching */
    struct ModeEntry {
        ModeFunc init;
        ModeFunc run;
        const char* name;
    };

    static ModeEntry mode_tbl[] = {
        {
            &modeWaitInit,
            &modeWait,
            "WAIT",
        },
        {
            &modeDamageInit,
            &modeDamage,
            "DAMAGE",
        },
        {
            &modeParalysisInit,
            &modeParalysis,
            "PARALYSIS",
        },
        {
            &modeDeathInit,
            &modeDeath,
            "DEATH",
        },
        {
            &modeMoveInit,
            &modeMove,
            "MOVE",
        },
        {
            &modeCryInit,
            &modeCry,
            "CRY",
        },
        {
            &modeCryWaitInit,
            &modeCryWait,
            "CRY_WAIT",
        },
        {
            &modeAttackInit,
            &modeAttack,
            "ATTACK",
        },
        {
            &modeReturnInit,
            &modeReturn,
            "RETURN",
        },
        {
            &modeSilentPrayInit,
            &modeSilentPray,
            "SILENT_PRAY",
        },
        {
            &modeSwWaitInit,
            &modeSwWait,
            "SW_WAIT",
        },
        {
            &modeKanokeInit,
            &modeKanoke,
            "KANOKE",
        },
    };
    
    if (proc == PROC_INIT) {
        if (newMode == 5 || newMode == 7) {
            onIkari();
            setBtkAnm(3);
        } else if (newMode != 1) {
            offIkari();
            setBtkAnm(4);
        }
        
        if (newMode == 3 || newMode == 0xA) {
            fopAcM_OffStatus(this, fopAcStts_SHOWMAP_e);
            cLib_offBit<u32>(mAttentionInfo.mFlags, fopAc_Attn_LOCKON_ENEMY_e);
        } else {
            fopAcM_OnStatus(this, fopAcStts_SHOWMAP_e);
            cLib_onBit<u32>(mAttentionInfo.mFlags, fopAc_Attn_LOCKON_ENEMY_e);
        }
        
        mMode = newMode;
        (this->*mode_tbl[mMode].init)();
    } else if (proc == PROC_EXEC) {
        (this->*mode_tbl[mMode].run)();
    }
}

/* 000038D4-000039AC       .text setBrkAnm__6daRd_cFSc */
void daRd_c::setBrkAnm(s8) {
    /* Nonmatching */
}

/* 000039AC-00003B3C       .text setBtkAnm__6daRd_cFSc */
void daRd_c::setBtkAnm(s8) {
    /* Nonmatching */
}

/* 00003B3C-00003C48       .text setAnm__6daRd_cFScb */
void daRd_c::setAnm(s8, bool) {
    /* Nonmatching */
}

/* 00003C48-000040A8       .text _execute__6daRd_cFv */
bool daRd_c::_execute() {
    /* Nonmatching */
}

/* 000040A8-000041A8       .text debugDraw__6daRd_cFv */
void daRd_c::debugDraw() {
    /* Nonmatching */
}

/* 000041A8-00004318       .text _draw__6daRd_cFv */
bool daRd_c::_draw() {
    /* Nonmatching */
}

/* 00004318-00004338       .text isLinkControl__6daRd_cFv */
bool daRd_c::isLinkControl() {
    return dComIfGp_getPlayer(0) != dComIfGp_getLinkPlayer();
}

/* 00004338-000046A4       .text createInit__6daRd_cFv */
void daRd_c::createInit() {
    /* Nonmatching */
}

/* 000046A4-00004720       .text getArg__6daRd_cFv */
void daRd_c::getArg() {
    /* Nonmatching */
    u32 params = fopAcM_GetParam(this);
    m2B4 = fopAcM_GetParamBit(params, 0x00, 1);
    int areaRadius = fopAcM_GetParamBit(params, 0x01, 7);
    m2BC = fopAcM_GetParamBit(params, 0x08, 8);
    mSwNo = fopAcM_GetParamBit(params, 0x18, 8);
    if (areaRadius == 0x7F) {
        areaRadius = 0;
    }
    mAreaRadius = l_HIO.m30 + areaRadius;
}

/* 00004720-000047C8       .text _create__6daRd_cFv */
s32 daRd_c::_create() {
    fopAcM_SetupActor(this, daRd_c);
    
    s32 phase_state = dComIfG_resLoad(&mPhs, m_arc_name);
    
    if (phase_state == cPhs_COMPLEATE_e) {
        getArg();
        
        if (!fopAcM_entrySolidHeap(this, createHeap_CB, 0x2520)) {
            return cPhs_ERROR_e;
        }
        
        createInit();
    }
    
    return phase_state;
}

/* 00004F60-00004FB8       .text _delete__6daRd_cFv */
bool daRd_c::_delete() {
    dComIfG_resDelete(&mPhs, m_arc_name);
    enemy_fire_remove(&mEnemyFire);
    if (heap) {
        mpMorf->stopZelAnime();
    }
    return true;
}

/* 00004FB8-00004FD8       .text daRdCreate__FPv */
static s32 daRdCreate(void* i_this) {
    return static_cast<daRd_c*>(i_this)->_create();
}

/* 00004FD8-00004FFC       .text daRdDelete__FPv */
static BOOL daRdDelete(void* i_this) {
    return static_cast<daRd_c*>(i_this)->_delete();
}

/* 00004FFC-00005020       .text daRdExecute__FPv */
static BOOL daRdExecute(void* i_this) {
    return static_cast<daRd_c*>(i_this)->_execute();
}

/* 00005020-00005044       .text daRdDraw__FPv */
static BOOL daRdDraw(void* i_this) {
    return static_cast<daRd_c*>(i_this)->_draw();
}

/* 00005044-0000504C       .text daRdIsDelete__FPv */
static BOOL daRdIsDelete(void* i_this) {
    return TRUE;
}

static actor_method_class daRdMethodTable = {
    (process_method_func)daRdCreate,
    (process_method_func)daRdDelete,
    (process_method_func)daRdExecute,
    (process_method_func)daRdIsDelete,
    (process_method_func)daRdDraw,
};

actor_process_profile_definition g_profile_RD = {
    /* LayerID      */ fpcLy_CURRENT_e,
    /* ListID       */ 7,
    /* ListPrio     */ fpcLy_CURRENT_e,
    /* ProcName     */ PROC_RD,
    /* Proc SubMtd  */ &g_fpcLf_Method.mBase,
    /* Size         */ sizeof(daRd_c),
    /* SizeOther    */ 0,
    /* Parameters   */ 0,
    /* Leaf SubMtd  */ &g_fopAc_Method.base,
    /* Priority     */ 0x00D4,
    /* Actor SubMtd */ &daRdMethodTable,
    /* Status       */ fopAcStts_CULL_e | fopAcStts_UNK40000_e | fopAcStts_UNK200000_e,
    /* Group        */ fopAc_ENEMY_e,
    /* CullType     */ fopAc_CULLBOX_CUSTOM_e,
};
